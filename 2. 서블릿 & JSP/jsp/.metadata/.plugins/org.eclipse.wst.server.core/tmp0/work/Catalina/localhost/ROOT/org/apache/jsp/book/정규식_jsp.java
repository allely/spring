/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.81
 * Generated at: 2023-11-24 06:15:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class 정규식_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	.area1 {\r\n");
      out.write("		border: 1px solid;\r\n");
      out.write("		width: 500px;\r\n");
      out.write("		height: 300px;\r\n");
      out.write("		overflow: scroll;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	window.onload = function() {\r\n");
      out.write("		btn1.addEventListener('click', function() {\r\n");
      out.write("			// 정규식 : 패턴 생성\r\n");
      out.write("			// 전화번호 : 숫자3-숫자4-숫자4\r\n");
      out.write("			// 이메일주소 : 영문대소문자, 몇가지 기호(., $)@영문자.영문자\r\n");
      out.write("			\r\n");
      out.write("			// 생성자를 이용한 정규 표현식 객체 생성\r\n");
      out.write("			// 생성자의 매개값 : 패턴문자열을 지정\r\n");
      out.write("			let regExp = new RegExp('script');\r\n");
      out.write("			console.log(regExp, typeof(regExp), regExp instanceof RegExp);\r\n");
      out.write("			\r\n");
      out.write("			// 리터럴을 이용한 정규 표현식 객체 생성\r\n");
      out.write("			// 패턴 양쪽에 /로 작성한다.(시작 기호, 종료 기호)\r\n");
      out.write("			let regExp1 = /script/;\r\n");
      out.write("			console.log(regExp1, typeof(regExp1), regExp1 instanceof RegExp);\r\n");
      out.write("			\r\n");
      out.write("			/*\r\n");
      out.write("	        RegExp 객체에서 제공하는 메소드\r\n");
      out.write("	            객체.test(문자열) : 문자열에 정규식 패턴을 만족하는 값이 있으면 true, 없으면 false를 리턴한다.\r\n");
      out.write("	            객체.exec(문자열) : 문자열에 정규식 패턴을 만족하는 값이 있으면 처음 매치된 문자열 리턴한다.\r\n");
      out.write("            */ \r\n");
      out.write("            \r\n");
      out.write("            let str1 = \"javascript jquery ajax\";\r\n");
      out.write("	        let str2 = \"java jquery ajax\";\r\n");
      out.write("	        \r\n");
      out.write("	        regExp.test(str1);\r\n");
      out.write("	        regExp.test(str2);\r\n");
      out.write("	        \r\n");
      out.write("	        area1.innerHtml = \"regExp.test(str1) : \" + regExp.test(str1) + \"<br>\";\r\n");
      out.write("	        area1.innerHtml += \"regExp.test(str2) : \" + regExp.test(str2) + \"<br>\";\r\n");
      out.write("	        \r\n");
      out.write("	        \r\n");
      out.write("	        area1.innerHtml += \"regExp.test(str1) : \" + regExp.test(str1) + \"<br>\";\r\n");
      out.write("	        area1.innerHtml += \"regExp.test(str2) : \" + regExp.test(str2) + \"<br>\";\r\n");
      out.write("	        \r\n");
      out.write("	        \r\n");
      out.write("	        /*\r\n");
      out.write("	        	숫자 : \\d\r\n");
      out.write("	        	+ : 1ro 이상\r\n");
      out.write("	        	$ : 문자열의 끝 의미\r\n");
      out.write("	        */\r\n");
      out.write("	        // 숫자가 1개 이상\r\n");
      out.write("	        let num = /\\d+/;\r\n");
      out.write("	        let num1 = /\\d + s/;\r\n");
      out.write("	        console.log(\"num.test('0123')\", num.test('0123'));\r\n");
      out.write("	        console.log(\"num.test('0123aa')\", num.test('0123aa'));\r\n");
      out.write("\r\n");
      out.write("	        console.log(\"num1.test('0123')\", num1.test('0123'));\r\n");
      out.write("	        console.log(\"num1.test('0123aa')\", num1.test('0123aa'));\r\n");
      out.write("	        \r\n");
      out.write("	  \r\n");
      out.write("	        \r\n");
      out.write("	        \r\n");
      out.write("			// 박스안에 출력하기\r\n");
      out.write("			/*\r\n");
      out.write("			area1.innerHTML = \"test\"\r\n");
      out.write("							+ \"<table border='1'>  \"\r\n");
      out.write("							+ \"	<tr>               \"\r\n");
      out.write("							+ \"		<td>test1</td> \"\r\n");
      out.write("							+ \"		<td>test2</td> \"\r\n");
      out.write("							+ \"		<td>test3</td> \"\r\n");
      out.write("							+ \"	</tr>              \"\r\n");
      out.write("							+ \"</table>            \";\r\n");
      out.write("			*/\r\n");
      out.write("			\r\n");
      out.write("			/*\r\n");
      out.write("				전화번호 체크\r\n");
      out.write("				숫자3개-숫자4개-숫자4개\r\n");
      out.write("				x{반복횟수}\r\n");
      out.write("				x{3} : xxx\r\n");
      out.write("				\\d{3} - \\d{4} - \\d{4}\r\n");
      out.write("			*/\r\n");
      out.write("			let phone = /\\d{3} - \\d{4} - \\d{4}/;\r\n");
      out.write("			console.log('phone1 : ', phone.test('000-000-0000'));\r\n");
      out.write("			console.log('phone2 : ', phone.test('000'));\r\n");
      out.write("			console.log('phone3 : ', phone.test('aaa-aaaa-aaaa'));\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>test1</td>\r\n");
      out.write("			<td>test2</td>\r\n");
      out.write("			<td>test3</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<h1>정규 표현식</h1>\r\n");
      out.write("    <p>\r\n");
      out.write("        정규 표현식(Regular Expresison)이란, <br>\r\n");
      out.write("        특정 규칙을 가진 문자열을 검색하거나 치환할 때 사용하는 형식 언어이다. <br><br>\r\n");
      out.write("\r\n");
      out.write("        정규 표식을 이용하면 입력된 문자열에 대해 특정 조건 검색이나 치환 시\r\n");
      out.write("        복잡한 조건을 제시할 필요 없이 간단하게 처리가 가능하다.\r\n");
      out.write("    </p> \r\n");
      out.write("    \r\n");
      out.write("	<h2>1. 정규 표현식 객체 생성</h2>\r\n");
      out.write("    <p>\r\n");
      out.write("        정규 표현식 객체를 생성하기 위해서는 정규 표현식 리터럴과 RegExp 생성자 함수를 사용한다. <br>\r\n");
      out.write("        리터럴을 사용하는 것이 일반적이다. (/패턴/플래그)\r\n");
      out.write("    </p> \r\n");
      out.write("    \r\n");
      out.write("    <button id=\"btn1\">실행</button>\r\n");
      out.write("    <div id=\"area1\" class=\"area1\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
