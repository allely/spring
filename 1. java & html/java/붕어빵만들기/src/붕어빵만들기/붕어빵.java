package 붕어빵만들기;

//붕어빵 만들기 위한 틀
public class 붕어빵 {
	// 멤버변수(이 크래스에 소속되었다 멤버라고 부름)
	// 변수(붕어빵 클래스에 저장된 데이터를 보관하는 메모리공간)
	String 붕어빵_바깥쪽 = "밀가루 반죽";// 밀가루 반죽
	String 붕어빵_안쪽 = "팥앙금";// 맛있는 소
	
	//먹는사람
	String 먹을_사람;
	
	//붕어빵을 처음 새로 만들 때 무조건 불러서
	//위의 멤버변수에 값을 저장해주는 메소드
	//초기화 메소드라고 하고 이 메소드를 생성자라고 한다.
	//무조건 개게가 만들어질 때 new와 같이 불러진다.
	//#생성자 선언법 : 클래스명 (멤버변수에 저장할 데이터변수들...){
	//... 기능들
	//}
	붕어빵(String 붕어빵을_먹을사람, String 붕어빵_안에_소){
		먹을_사람 = 붕어빵을_먹을사람;
		붕어빵_안쪽 = 붕어빵_안에_소;
	}
	
	// 이 메소드라고 하는 것도 이 틀과 연관이 있어야 한다.
	// 그래서 멤버 메소드라고 부른다
	// 행동(이 트과 관련되어서만 동작이 실행되니까 메소드)
	void 붕어빵_틀에_재료를_넣는다() {
		System.out.println("밀가루 반죽을 집어 넣는다.");
		System.out.println(붕어빵_안쪽 + "을 집어넣는다.");
		System.out.println("밀가루 반죽을 덮어 준다.");
	}

	// 붕어빵을 불에 구워준다.
	void 붕어빵을_구워준다() {
		System.out.println("붕어빵을 구워준다.");
	}

	// 잘 구워준 붕어빵을 꺼낸다.
	void 붕어빵을_꺼낸다() {
		System.out.println("잘 구워진 붕어빵을 꺼낸다.");

	}

	// 잘 구워진 붕어빵을 맛있게 먹는다.
	void 붕어빵을_맛있게_먹는다() {
		System.out.println(먹을_사람 +"이(가) 잘 구워진 붕어빵을 맛있게 먹는다.");
	}

	// java로 만들어진 애플리케이션을 실행하려면 main()메소드가
	// 반드시 있어야 한다. 형식은 아래 예제를 따릅니다.
	// public : main()를 누구나 실행할 수 있다
	// static : main()를 한번만 실행한다. 그 후 붕어빵은 계속 붕어빵 클래스를 사용하여 반복해서 만들 수 있다.
	// void : 실행 후에 남는것(=결과값) 없음
	// main : 자바의 약속. 무조건 실행하는 메소드의 이름으로 이것은 자바의 문법입니다.
	// String[] : 문자열들 = 배열이라고 부름
	// 배열은 여러 데이터들을 한개의 대표이름으로 부르고 각각의 데이터는차례 번호로 구분한다. 예)String[1], String[2]
	// args : 문자열들(=문자열 배열)의 대표 변수명
	public static void main(String[] args) {
		// 붕어빵툴(= 붕어빵 클래스)를 이용해서 붕어빵을 만듭시다.
		// 붕어빵객체의 데이터형을 선언합니다.
		// 만들어진 붕어빵 객체의 이름을 선언합니다.
		// 컴퓨터 메모리에 방을 만든다는 뜻입니다.
		// 붕어빵틀(붕어빵 클래스)을 이용해서
		// 따끈따끈한 새(NEW) 붕어빵을 만든다.
		붕어빵 내붕어빵 = new 붕어빵("나", "팥앙금");
		// 객체와 관련되었다는 뜻으로, .을 이용합니다.
		내붕어빵.붕어빵_틀에_재료를_넣는다();
		내붕어빵.붕어빵을_구워준다();
		내붕어빵.붕어빵을_꺼낸다();
		내붕어빵.붕어빵을_맛있게_먹는다();
		System.out.println("(●'◡'●)");
		
		//
		붕어빵 동생붕어빵 = new 붕어빵("동생", "슈크림");
		동생붕어빵.붕어빵_틀에_재료를_넣는다();
		동생붕어빵.붕어빵을_구워준다();
		동생붕어빵.붕어빵을_꺼낸다();
		동생붕어빵.붕어빵을_맛있게_먹는다();
	}
}
